import telebot
import sqlite3

bot = telebot.TeleBot('5761676599:AAHjLEChmM_3dkylEM3xJsfJG88dAMCra40')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_database():
    conn = sqlite3.connect('book_reviews.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            book_title TEXT,
            author TEXT,
            comment TEXT,
            rating INTEGER,
            quote TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_database()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_review(user_id, book_title, author, comment, rating, quote):
    conn = sqlite3.connect('book_reviews.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO reviews (user_id, book_title, author, comment, rating, quote)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, book_title, author, comment, rating, quote))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_reviews(user_id):
    conn = sqlite3.connect('book_reviews.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM reviews WHERE user_id = ?', (user_id,))
    reviews = cursor.fetchall()
    conn.close()
    return reviews
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–Ω–∏–∂–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç!\n"
                              "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:")
    show_menu(user_id)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–ú–æ–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏"),
               telebot.types.KeyboardButton("–ù–æ–≤–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ "–ú–æ–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏"
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏")
def handle_my_reviews(message):
    user_id = message.chat.id
    reviews = load_reviews(user_id)
    if not reviews:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–Ω–∑–∏–π.")
        show_menu(user_id)
        return

    bot.send_message(user_id, "–í–∞—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏:")
    for i, review in enumerate(reviews):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_review_{i}"))
        bot.send_message(user_id, format_review(review), reply_markup=markup)

    show_next_reviews(user_id, len(reviews))

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def format_review(review):
    book_title, author, comment, rating, *extra = review
    
    formatted_review = f"üìö *{book_title}*\n" \
                       f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author}\n" \
                       f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n" \
                       f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
    
    if extra:
        formatted_review += f"üìù –¶–∏—Ç–∞—Ç–∞: {extra[0]}\n"
    
    return formatted_review

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π –≤ –º–æ–∏—Ö —Ä–µ—Ü–µ–Ω–∑–∏—è—Ö
def show_next_reviews(user_id, total_reviews):
    reviews_per_page = 4
    start_index = total_reviews - reviews_per_page
    end_index = total_reviews

    if start_index < 0:
        start_index = 0

    if end_index > total_reviews:
        end_index = total_reviews

    markup = telebot.types.InlineKeyboardMarkup()

    if start_index > 0:
        markup.row(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="prev_reviews"))

    for i in range(start_index, end_index):
        markup.row(telebot.types.InlineKeyboardButton(str(i + 1), callback_data=f"show_review_{i}"))

    if end_index < total_reviews:
        markup.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_reviews"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–Ω–∑–∏—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ü–µ–Ω–∑–∏–∏ –≤ –º–æ–∏—Ö —Ä–µ—Ü–µ–Ω–∑–∏—è—Ö
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_review_"))
def handle_show_review(call):
    user_id = call.message.chat.id
    reviews = load_reviews(user_id)
    review_index = int(call.data.split("_")[2])

    if review_index >= 0 and review_index < len(reviews):
        review = reviews[review_index]
        bot.send_message(user_id, format_review(review))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ –≤ –º–æ–∏—Ö —Ä–µ—Ü–µ–Ω–∑–∏—è—Ö
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_review_"))
def handle_delete_review(call):
    user_id = call.message.chat.id
    reviews = load_reviews(user_id)
    review_index = int(call.data.split("_")[2])

    if review_index >= 0 and review_index < len(reviews):
        delete_review(user_id, review_index)
        bot.answer_callback_query(call.id, "–†–µ—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        show_menu(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ "–ù–æ–≤–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è"
@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è")
def handle_new_review(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_book_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
def process_book_title(message):
    user_id = message.chat.id
    book_title = message.text.strip()

    if message.text == "–ù–∞–∑–∞–¥":
        show_menu(user_id)
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        save_review(user_id, "", "", "", "", "")
        bot.send_message(user_id, "–†–µ—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        show_menu(user_id)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_author, book_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
def process_author(message, book_title):
    user_id = message.chat.id
    author = message.text.strip()

    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        bot.register_next_step_handler(message, process_book_title)
        return

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        save_review(user_id, book_title, "", "", "", "")
        bot.send_message(user_id, "–†–µ—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        show_menu(user_id)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–Ω–∏–≥–µ:")
    bot.register_next_step_handler(message, process_comment, book_title, author)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∫–Ω–∏–≥–µ
def process_comment(message, book_title, author):
    user_id = message.chat.id
    comment = message.text.strip()

    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
        bot.register_next_step_handler(message, process_author, book_title)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10:")
    bot.register_next_step_handler(message, process_rating, book_title, author, comment)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
def process_rating(message, book_title, author, comment):
    user_id = message.chat.id
    rating = message.text.strip()

    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–Ω–∏–≥–µ:")
        bot.register_next_step_handler(message, process_comment, book_title, author)
        return

    if not rating.isdigit() or int(rating) < 1 or int(rating) > 10:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10.")
        bot.register_next_step_handler(message, process_rating, book_title, author, comment)
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫–Ω–∏–≥–∏:")
    bot.register_next_step_handler(message, process_quote, book_title, author, comment, rating)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–∏—Ç–∞—Ç—ã
def process_quote(message, book_title, author, comment, rating):
    user_id = message.chat.id
    quote = message.text.strip()

    if message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10:")
        bot.register_next_step_handler(message, process_rating, book_title, author, comment)
        return

    save_review(user_id, book_title, author, comment, rating, quote)
    bot.send_message(user_id, "–†–µ—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    show_menu(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    user_id = message.chat.id
    show_menu(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def handle_skip(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–≤–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
